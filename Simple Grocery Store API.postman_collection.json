{
	"info": {
		"_postman_id": "db53da40-fb98-47de-86c4-bb8875739ef3",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24742376"
	},
	"item": [
		{
			"name": "API Authentication",
			"item": [
				{
					"name": "Register a new API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    var token=jsonData.accessToken;\r",
									"    \r",
									"\r",
									"pm.collectionVariables.set(\"accessToken\",token );\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 400 or 409\", function () {\r",
									"    pm.response.to.not.have.status([400,409]);\r",
									"});\r",
									"\r",
									"//check the body property\r",
									"pm.test(\"validate the property of response body\", function () {\r",
									"   pm.expect(jsonData).to.haveOwnProperty(\"accessToken\")\r",
									"});\r",
									"\r",
									"//check the  property value type\r",
									"pm.test(\"validate the type of accessToken\", function () {\r",
									"   pm.expect(jsonData.accessToken).to.a(\"String\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomCharCode = Math.random() < 0.5 ?\r",
									"      Math.floor(Math.random() * (90 - 65 + 1)) + 65 :  // Uppercase letters \r",
									"      Math.floor(Math.random() * (122 - 97 + 1)) + 97;  // Lowercase letters \r",
									"\r",
									"    result += String.fromCharCode(randomCharCode);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}\r",
									"\r",
									"\r",
									"const random_name = generateRandomString(8);\r",
									"const random_mail=random_name+\"@gmail.com\";\r",
									"pm.environment.set(\"Name\",random_name );\r",
									"pm.environment.set(\"Mail\", random_mail);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"{{Name}}\",\r\n   \"clientEmail\": \"{{Mail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api-clients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"test the body data and datatype\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).haveOwnProperty(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"    pm.expect(jsonData.status).to.a(\"String\");\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = \"http://simple-grocery-store-api.online\";\r",
									"pm.collectionVariables.set(\"base_url\", url);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    var product_id=jsonData[0].id;\r",
									"    console.log(typeof(product_id));\r",
									"     console.log(product_id);\r",
									"    pm.collectionVariables.set(\"id\", product_id);\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i].id).to.a(\"number\");\r",
									"        pm.expect(jsonData[i].category).to.a(\"string\");\r",
									"        pm.expect(jsonData[i].name).to.a(\"string\");\r",
									"        pm.expect(jsonData[i].inStock).to.a(\"Boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body property is correct\", function () {\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i]).to.haveOwnProperty(\"id\");\r",
									"        pm.expect(jsonData[i]).to.haveOwnProperty(\"category\");\r",
									"        pm.expect(jsonData[i]).to.haveOwnProperty(\"name\");\r",
									"        pm.expect(jsonData[i]).to.haveOwnProperty(\"inStock\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products with query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"find the product id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData[0].id);\r",
									"\r",
									"    \r",
									"//     for (const product of jsonData) {\r",
									"    \r",
									"//     console.log(\"Product ID:\", product.id);\r",
									"// }\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"in_stock value check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (const stock of jsonData) {\r",
									"        console.log(\"Product ID:\", stock.inStock);\r",
									"        pm.expect(stock.inStock).to.eql(true);\r",
									"        pm.expect(stock.category).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body property is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"   for(let i=0;i<jsonData.length;i++){\r",
									"    pm.expect(jsonData[i]).haveOwnProperty(\"id\")\r",
									"    pm.expect(jsonData[i]).haveOwnProperty(\"category\")\r",
									"    pm.expect(jsonData[i]).haveOwnProperty(\"name\")\r",
									"    pm.expect(jsonData[i]).haveOwnProperty(\"inStock\")\r",
									"   }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body property  value is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"   for(let i=0;i<jsonData.length;i++){\r",
									"    pm.expect(jsonData[i].id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData[i].category).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[i].name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[i].inStock).to.be.a(\"Boolean\")\r",
									"   }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?category=coffee&available=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "meat-seafood",
									"disabled": true
								},
								{
									"key": "category",
									"value": "fresh-produce",
									"disabled": true
								},
								{
									"key": "category",
									"value": "coffee"
								},
								{
									"key": "results",
									"value": "20",
									"disabled": true
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								},
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is not 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body property is correct\", function () {\r",
									"    for (let i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData).to.haveOwnProperty(\"id\");\r",
									"        pm.expect(jsonData).to.haveOwnProperty(\"category\");\r",
									"        pm.expect(jsonData).to.haveOwnProperty(\"name\");\r",
									"        pm.expect(jsonData).to.haveOwnProperty(\"inStock\");\r",
									"        pm.expect(jsonData).to.haveOwnProperty(\"manufacturer\");\r",
									"        pm.expect(jsonData).to.haveOwnProperty(\"price\");\r",
									"        pm.expect(jsonData).to.haveOwnProperty(\"current-stock\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Body value type is correct\", function () {\r",
									"   \r",
									"        pm.expect(jsonData.id).to.a(\"number\");\r",
									"        pm.expect(jsonData.category).to.a(\"string\");\r",
									"        pm.expect(jsonData.name).to.a(\"string\");\r",
									"        pm.expect(jsonData.manufacturer).to.a(\"string\");\r",
									"        pm.expect(jsonData.price).to.a(\"number\");\r",
									"        pm.expect(jsonData[\"current-stock\"]).to.be.a(\"number\")\r",
									"        pm.expect(jsonData.inStock).to.a(\"Boolean\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"check stock\", function () {\r",
									"     pm.expect(jsonData['current-stock']).to.above(0);\r",
									"     pm.expect(jsonData.inStock).to.equal(true)\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    var cart_id=jsonData.cartId;\r",
									"\r",
									"pm.collectionVariables.set(\"CartId\", cart_id);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"  \r",
									"    pm.expect(jsonData.created).to.equal(true);\r",
									"    pm.expect(jsonData).to.haveOwnProperty(\"cartId\")\r",
									"    pm.expect(jsonData.cartId).to.be.a('string');\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									"\r",
									"let json_data=pm.response.json();\r",
									"console.log(json_data);\r",
									"\r",
									"pm.test(\"check response body property\", function () {\r",
									"   let len=json_data.items.length;\r",
									"   for(let i=0;i<len;i++){\r",
									"   pm.expect(json_data.items[i]).to.haveOwnProperty(\"id\")\r",
									"   pm.expect(json_data.items[i]).to.haveOwnProperty(\"productId\")\r",
									"   pm.expect(json_data.items[i]).to.haveOwnProperty(\"quantity\")\r",
									"   }\r",
									"});\r",
									"\r",
									"pm.test(\"check response body property type\", function () {\r",
									"   let len=json_data.items.length;\r",
									"   for(let i=0;i<len;i++){\r",
									"   pm.expect(json_data.items[i].id).to.be.a(\"number\")\r",
									"   pm.expect(json_data.items[i].productId).to.be.a(\"number\")\r",
									"   pm.expect(json_data.items[i].quantity).to.be.a(\"number\")\r",
									"   }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{CartId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{CartId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an items to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var json_data=pm.response.json()\r",
									"var id=json_data.itemId;\r",
									"pm.collectionVariables.set(\"item_id\",id);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"check body property\", function () {\r",
									"    pm.expect(json_data).to.haveOwnProperty(\"itemId\")\r",
									"     pm.expect(json_data).to.haveOwnProperty(\"created\")\r",
									"});\r",
									"\r",
									"pm.test(\"check itemId type \", function () {\r",
									"   \r",
									"    pm.expect(json_data.itemId).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\":2177\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{CartId}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{CartId}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let json_data=pm.response.json();\r",
									"let id=json_data[0].productId;\r",
									"\r",
									"pm.collectionVariables.set(\"product_id\", id);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body property check\", function () {\r",
									"    let len=json_data.length;\r",
									"    for(let i=0;i<len;i++){\r",
									"    pm.expect(json_data[i]).to.haveOwnProperty(\"id\")\r",
									"    pm.expect(json_data[i]).to.haveOwnProperty(\"productId\")\r",
									"    pm.expect(json_data[i]).to.haveOwnProperty(\"quantity\")\r",
									"\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"response body property type check\", function () {\r",
									"    let len=json_data.length;\r",
									"    for(let i=0;i<len;i++){\r",
									"    pm.expect(json_data[i].id).to.be.a(\"number\")\r",
									"    pm.expect(json_data[i].productId).to.be.a(\"number\")\r",
									"    pm.expect(json_data[i].quantity).to.be.a(\"number\")\r",
									"\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{CartId}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{CartId}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.not.not.have.status(404);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{CartId}}/items/{{item_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{CartId}}",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\":{{product_id}},\r\n    \"quantity\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{CartId}}/items/{{item_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{CartId}}",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{CartId}}/items/{{item_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{CartId}}",
								"items",
								"{{item_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let json_data=pm.response.json()\r",
									"let order=json_data.orderId\r",
									"pm.collectionVariables.set(\"orderId\",order );\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.not.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body property check\", function () {\r",
									"     pm.expect(json_data).to.haveOwnProperty(\"orderId\")\r",
									"});\r",
									"\r",
									"pm.test(\"response body property type check\", function () {\r",
									"     pm.expect(json_data.orderId).to.be.a(\"string\")\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\":\"{{CartId}}\",\r\n    \"customerName\": \"John Doe1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    var id=jsonData[0].id;\r",
									"\r",
									"pm.collectionVariables.set(\"order_id\", id);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.not.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\" check response body properties\", function () {\r",
									"   let len=jsonData.length\r",
									"   for(let i=0;i<len;i++){\r",
									"    pm.expect(jsonData[i]).to.haveOwnProperty(\"id\")\r",
									"    pm.expect(jsonData[i]).to.haveOwnProperty(\"items\")\r",
									"    pm.expect(jsonData[i]).to.haveOwnProperty(\"customerName\")\r",
									"\r",
									"    //items body property check\r",
									"    for(let j=0;j<jsonData[i].items.length;j++){\r",
									"        pm.expect(jsonData[i].items[j]).to.haveOwnProperty(\"id\")\r",
									"        pm.expect(jsonData[i].items[j]).to.haveOwnProperty(\"productId\")\r",
									"        pm.expect(jsonData[i].items[j]).to.haveOwnProperty(\"quantity\")\r",
									"    }\r",
									"   }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\" check response body properties types\", function () {\r",
									"   let len=jsonData.length\r",
									"   for(let i=0;i<len;i++){\r",
									"    pm.expect(jsonData[i].id).to.be.a(\"string\")\r",
									"    pm.expect(jsonData[i].items).to.be.a(\"array\")\r",
									"    pm.expect(jsonData[i].customerName).to.be.a(\"string\")\r",
									"    \r",
									"    //items body property type check\r",
									"    for(let j=0;j<jsonData[i].items.length;j++){\r",
									"        pm.expect(jsonData[i].items[j].id).to.be.a(\"number\")\r",
									"        pm.expect(jsonData[i].items[j].productId).to.be.a(\"number\")\r",
									"        pm.expect(jsonData[i].items[j].quantity).to.be.a(\"number\")\r",
									"    }\r",
									"   }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let json_data=pm.response.json()\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.not.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response body property check\", function () {\r",
									"   pm.expect(json_data).to.haveOwnProperty(\"id\")\r",
									"   pm.expect(json_data).to.haveOwnProperty(\"items\")\r",
									"   pm.expect(json_data).to.haveOwnProperty(\"customerName\")\r",
									"   pm.expect(json_data).to.haveOwnProperty(\"processed\")\r",
									"\r",
									"   let len=json_data.items.length\r",
									"   for(let i=0;i<len;i++){\r",
									"    pm.expect(json_data.items[i]).to.haveOwnProperty(\"id\")\r",
									"    pm.expect(json_data.items[i]).to.haveOwnProperty(\"productId\")\r",
									"    pm.expect(json_data.items[i]).to.haveOwnProperty(\"quantity\")\r",
									"\r",
									"   }\r",
									"});\r",
									"\r",
									"pm.test(\"response body property type check\", function () {\r",
									"   pm.expect(json_data.id).to.be.a(\"string\")\r",
									"   pm.expect(json_data.items).to.be.a(\"array\")\r",
									"   pm.expect(json_data.customerName).to.be.a(\"string\")\r",
									"   pm.expect(json_data.processed).to.be.a(\"boolean\")\r",
									"\r",
									"//check items array property type\r",
									"   let len=json_data.items.length\r",
									"   for(let i=0;i<len;i++){\r",
									"    pm.expect(json_data.items[i].id).to.be.a(\"number\")\r",
									"    pm.expect(json_data.items[i].productId).to.be.a(\"number\")\r",
									"    pm.expect(json_data.items[i].quantity).to.be.a(\"number\")\r",
									"\r",
									"   }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/{{order_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.not.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"customerName\": \"Arifin\",\r\n \"comment\":\"Hurry Up\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/{{order_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.not.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.not.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/{{order_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": ""
		},
		{
			"key": "productid",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "CartId",
			"value": ""
		},
		{
			"key": "item_id",
			"value": ""
		},
		{
			"key": "product_id",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "oder_id",
			"value": ""
		},
		{
			"key": "order_id",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}